package ReykilLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class RComponent_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);

    tgs.append("import React, {} from 'react';");
    tgs.newLine();
    tgs.newLine();
    tgs.append("function ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("() {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("return (");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<div>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode render : Sequence.fromIterable(SLinkOperations.collectMany(SModelOperations.roots(SNodeOperations.getModel(ctx.getPrimaryInput()), CONCEPTS.ReykillDSL$Hm), LINKS.renders$lmWu))) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(render, LINKS.cName$vz6U), PROPS.name$MnvL) == SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL)) {
        tgs.appendNode(render);
      }
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</div>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append(")");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.append("export default ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append(";");
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink cName$vz6U = MetaAdapterFactory.getReferenceLink(0x3ba2139d18a14caaL, 0x99b1d518013c442fL, 0x1062a8c9abf0339fL, 0x2d9e4360eb0b12a2L, "cName");
    /*package*/ static final SContainmentLink renders$lmWu = MetaAdapterFactory.getContainmentLink(0x3ba2139d18a14caaL, 0x99b1d518013c442fL, 0x64d22d80fe48070dL, 0x1062a8c9abf30945L, "renders");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ReykillDSL$Hm = MetaAdapterFactory.getConcept(0x3ba2139d18a14caaL, 0x99b1d518013c442fL, 0x64d22d80fe48070dL, "ReykilLanguage.structure.ReykillDSL");
  }
}
