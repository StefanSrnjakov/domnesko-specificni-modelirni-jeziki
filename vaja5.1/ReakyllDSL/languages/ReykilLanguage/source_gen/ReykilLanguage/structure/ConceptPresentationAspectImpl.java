package ReykilLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ComponentRender;
  private ConceptPresentation props_IElementRender;
  private ConceptPresentation props_ParagraphRender;
  private ConceptPresentation props_RApi;
  private ConceptPresentation props_RComponent;
  private ConceptPresentation props_REndPoint;
  private ConceptPresentation props_ReykillDSL;
  private ConceptPresentation props_TitleRender;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ComponentRender:
        if (props_ComponentRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3ba2139d18a14caaL, 0x99b1d518013c442fL, 0x1062a8c9abf0339fL, 0x2d9e4360eb0b12a2L, "cName", "", "");
          props_ComponentRender = cpb.create();
        }
        return props_ComponentRender;
      case LanguageConceptSwitch.IElementRender:
        if (props_IElementRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IElementRender = cpb.create();
        }
        return props_IElementRender;
      case LanguageConceptSwitch.ParagraphRender:
        if (props_ParagraphRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParagraphRender");
          props_ParagraphRender = cpb.create();
        }
        return props_ParagraphRender;
      case LanguageConceptSwitch.RApi:
        if (props_RApi == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RApi");
          props_RApi = cpb.create();
        }
        return props_RApi;
      case LanguageConceptSwitch.RComponent:
        if (props_RComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RComponent = cpb.create();
        }
        return props_RComponent;
      case LanguageConceptSwitch.REndPoint:
        if (props_REndPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("REndPoint");
          props_REndPoint = cpb.create();
        }
        return props_REndPoint;
      case LanguageConceptSwitch.ReykillDSL:
        if (props_ReykillDSL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ReykillDSL = cpb.create();
        }
        return props_ReykillDSL;
      case LanguageConceptSwitch.TitleRender:
        if (props_TitleRender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TitleRender");
          props_TitleRender = cpb.create();
        }
        return props_TitleRender;
    }
    return null;
  }
}
